{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from \"axios\";\nimport { mapState, mapMutations } from \"vuex\";\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      avaiableStatus: [\"cancel\", \"confirmed\", \"preparing\", \"checking\", \"delivering\", \"delivered\", \"completed\"],\n      allBills: [],\n      bookings: [],\n      // New data for table bookings\n      showOrderDetails: false,\n      sendId: undefined,\n      interval: \"\"\n    };\n  },\n  mounted: function () {\n    this.getAllBills();\n    this.getBookings(); // Fetch table bookings when the dashboard is mounted\n    if (!this.admin) {\n      this.$router.push(\"/\");\n    }\n    this.autoUpdate();\n  },\n  beforeUnmount() {\n    clearInterval(this.interval);\n  },\n  computed: {\n    ...mapState([\"allFoods\", \"admin\"]),\n    filterBills: function () {\n      return this.allBills.filter(b => b.bill_status < 6 && b.bill_status > 0);\n    }\n  },\n  methods: {\n    ...mapMutations([\"setAdmin\"]),\n    async getAllBills() {\n      this.allBills = (await axios.get('/billstatus')).data;\n    },\n    async getBookings() {\n      this.bookings = (await axios.get('/tablebookings')).data; // Fetch table bookings from the server\n    },\n    sendBillId: function (id) {\n      this.sendId = id;\n      this.showOrderDetails = !this.showOrderDetails;\n    },\n    closeView: function () {\n      this.showOrderDetails = !this.showOrderDetails;\n    },\n    handleLogout: function () {\n      this.setAdmin(\"\");\n    },\n    async nextStatusBtn(id) {\n      await axios.put('/billstatus/' + id);\n      this.getAllBills();\n    },\n    async paidBtn(id) {\n      await axios.put('/billstatus/paid/' + id);\n      this.getAllBills();\n    },\n    async cancelBtn(id) {\n      await axios.put('/billstatus/cancel/' + id);\n      this.getAllBills();\n    },\n    async confirmBooking(bookingId) {\n      await axios.put(`/tablebookings/confirm/${bookingId}`);\n      this.getBookings(); // Refresh the bookings after confirmation\n    },\n    async cancelBooking(bookingId) {\n      await axios.put(`/tablebookings/cancel/${bookingId}`);\n      this.getBookings(); // Refresh the bookings after cancellation\n    },\n    autoUpdate: function () {\n      this.interval = setInterval(function () {\n        this.getAllBills();\n        this.getBookings(); // Auto-refresh table bookings as well\n      }.bind(this), 1000);\n    }\n  }\n};","map":{"version":3,"names":["axios","mapState","mapMutations","name","data","avaiableStatus","allBills","bookings","showOrderDetails","sendId","undefined","interval","mounted","getAllBills","getBookings","admin","$router","push","autoUpdate","beforeUnmount","clearInterval","computed","filterBills","filter","b","bill_status","methods","get","sendBillId","id","closeView","handleLogout","setAdmin","nextStatusBtn","put","paidBtn","cancelBtn","confirmBooking","bookingId","cancelBooking","setInterval","bind"],"sources":["C:\\Users\\visha\\Downloads\\Vedeshi Khana college project\\frontend\\src\\admin\\Dashboard.vue"],"sourcesContent":["<template>\n    <div class=\"admin-container\">\n        <div class=\"d-flex justify-content-between\">\n            <h1>Vedeshi Khana</h1>\n            <button class=\"btn\" @click=\"handleLogout()\">Logout</button>\n        </div>\n\n        <!-- Orders Section -->\n        <div class=\"table-responsive\">\n            <h1>Orders Received</h1>\n            <table class=\"table colored-header datatable project-list\">\n                <thead>\n                    <tr>\n                        <th>Bill Id</th>\n                        <th>User Id</th>\n                        <th>Phone</th>\n                        <th>Address</th>\n                        <th>When</th>\n                        <th>Paid</th>\n                        <th>Total</th>\n                        <th>Status</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(b) in filterBills.slice().reverse()\" :key=\"b.bill_id\">\n                        <td>{{ b.bill_id }}</td>\n                        <td>{{ b.user_id }}</td>\n                        <td>{{ b.bill_phone }}</td>\n                        <td>{{ b.bill_address }}</td>\n                        <td>{{ b.bill_when }}</td>\n                        <td>{{ b.bill_paid }}</td>\n                        <td>â‚¹{{ b.bill_total }}</td>\n                        <td>{{ avaiableStatus[b.bill_status] }}</td>\n                        <td>\n                            <button v-if=\"b.bill_status < 5\" class=\"action-btn\" @click=\"nextStatusBtn(b.bill_id)\">\n                                {{ avaiableStatus[b.bill_status + 1] }}\n                            </button>\n\n                            <button v-if=\"b.bill_status == 1\" class=\"cancel-btn\" @click=\"cancelBtn(b.bill_id)\">\n                                Cancel\n                            </button>\n\n                            <button v-else-if=\"b.bill_status == 5 && b.bill_paid == 'false'\" class=\"paid-btn\"\n                                @click=\"paidBtn(b.bill_id)\">\n                                Paid\n                            </button>\n\n                            <button v-else-if=\"b.bill_status == 5 && b.bill_paid == 'true'\" class=\"action-btn\"\n                                @click=\"nextStatusBtn(b.bill_id)\">\n                                {{ avaiableStatus[b.bill_status + 1] }}\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <!-- Table Booking Section -->\n        <div class=\"table-responsive\">\n            <h1>Table Bookings</h1>\n            <table class=\"table colored-header datatable booking-list\">\n                <thead>\n                    <tr>\n                        <th>Booking Id</th>\n                        <th>User Name</th>\n                        <th>Phone</th>\n                        <th>Date</th>\n                        <th>Time</th>\n                        <th>Seats</th>\n                        <th>Status</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(booking) in bookings.slice().reverse()\" :key=\"booking.booking_id\">\n                        <td>{{ booking.booking_id }}</td>\n                        <td>{{ booking.user_name }}</td>\n                        <td>{{ booking.phone }}</td>\n                        <td>{{ booking.booking_date }}</td>\n                        <td>{{ booking.booking_time }}</td>\n                        <td>{{ booking.seats }}</td>\n                        <td>{{ booking.status }}</td>\n                        <td>\n                            <button v-if=\"booking.status === 'Pending'\" class=\"action-btn\" @click=\"confirmBooking(booking.booking_id)\">\n                                Confirm\n                            </button>\n\n                            <button v-if=\"booking.status === 'Confirmed'\" class=\"cancel-btn\" @click=\"cancelBooking(booking.booking_id)\">\n                                Cancel\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { mapState, mapMutations } from \"vuex\";\n\nexport default {\n    name: 'Dashboard',\n\n    data() {\n        return {\n            avaiableStatus: [\"cancel\", \"confirmed\", \"preparing\", \"checking\", \"delivering\", \"delivered\", \"completed\"],\n            allBills: [],\n            bookings: [], // New data for table bookings\n            showOrderDetails: false,\n            sendId: undefined,\n            interval: \"\",\n        }\n    },\n\n    mounted: function () {\n        this.getAllBills();\n        this.getBookings(); // Fetch table bookings when the dashboard is mounted\n        if (!this.admin) {\n            this.$router.push(\"/\");\n        }\n        this.autoUpdate();\n    },\n\n    beforeUnmount() {\n        clearInterval(this.interval)\n    },\n\n    computed: {\n        ...mapState([\"allFoods\", \"admin\"]),\n\n        filterBills: function () {\n            return this.allBills.filter((b) => b.bill_status < 6 && b.bill_status > 0);\n        },\n    },\n\n    methods: {\n        ...mapMutations([\"setAdmin\"]),\n\n        async getAllBills() {\n            this.allBills = (await axios.get('/billstatus')).data;\n        },\n\n        async getBookings() {\n            this.bookings = (await axios.get('/tablebookings')).data; // Fetch table bookings from the server\n        },\n\n        sendBillId: function (id) {\n            this.sendId = id\n            this.showOrderDetails = !this.showOrderDetails;\n        },\n\n        closeView: function () {\n            this.showOrderDetails = !this.showOrderDetails;\n        },\n\n        handleLogout: function () {\n            this.setAdmin(\"\");\n        },\n\n        async nextStatusBtn(id) {\n            await axios.put('/billstatus/' + id);\n            this.getAllBills();\n        },\n\n        async paidBtn(id) {\n            await axios.put('/billstatus/paid/' + id);\n            this.getAllBills();\n        },\n\n        async cancelBtn(id) {\n            await axios.put('/billstatus/cancel/' + id);\n            this.getAllBills();\n        },\n\n        async confirmBooking(bookingId) {\n            await axios.put(`/tablebookings/confirm/${bookingId}`);\n            this.getBookings(); // Refresh the bookings after confirmation\n        },\n\n        async cancelBooking(bookingId) {\n            await axios.put(`/tablebookings/cancel/${bookingId}`);\n            this.getBookings(); // Refresh the bookings after cancellation\n        },\n\n        autoUpdate: function () {\n            this.interval = setInterval(function () {\n                this.getAllBills();\n                this.getBookings(); // Auto-refresh table bookings as well\n            }.bind(this), 1000);\n        }\n    },\n}\n</script>\n\n<style scoped>\n.admin-container {\n    background-color: #fff;\n    height: 100vh;\n    padding: 2rem 9%;\n    font-size: 16px;\n}\n\n.project-list>tbody>tr>td {\n    padding: 12px 8px;\n}\n\n.project-list>tbody>tr>td .avatar {\n    width: 22px;\n    border: 1px solid #CCC;\n}\n\n.table-responsive {\n    margin-top: 8vh;\n}\n\n.action-btn,\n.cancel-btn,\n.paid-btn {\n    width: 100px;\n    height: 25px;\n    color: white;\n    text-transform: capitalize;\n}\n\n.action-btn {\n    background-color: #0da9ef;\n    margin-right: 10px;\n}\n\n.cancel-btn,\n.paid-btn {\n    background-color: red;\n}\n\n.action-btn:hover {\n    background-color: #27ae60;\n}\n\n.booking-list>tbody>tr>td {\n    padding: 12px 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}